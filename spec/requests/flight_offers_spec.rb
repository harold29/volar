require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/flight_offers', type: :request do
  # FlightOffer. As you add validations to FlightOffer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      internal_id: 'MyString',
      source: 'MyString',
      instant_ticketing_required: false,
      non_homogeneous: false,
      one_way: false,
      last_ticketing_date: '2024-03-01',
      last_ticketing_datetime: '2024-03-01T00:00:00',
      number_of_bookable_seats: 1,
      price_total: '9.99',
      currency_id: create(:currency).id,
      flight_search_id: create(:flight_search).id
    }
  end

  let(:invalid_attributes) do
    {
      internal_id: nil,
      source: nil,
      instant_ticketing_required: nil,
      non_homogeneous: nil,
      one_way: nil,
      last_ticketing_date: nil,
      last_ticketing_datetime: nil,
      number_of_bookable_seats: nil,
      price_total: nil,
      currency_id: nil,
      flight_search_id: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      FlightOffer.create! valid_attributes
      get flight_offers_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      flight_offer = FlightOffer.create! valid_attributes
      get flight_offer_url(flight_offer)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_flight_offer_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      flight_offer = FlightOffer.create! valid_attributes
      get edit_flight_offer_url(flight_offer)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new FlightOffer' do
        expect do
          post flight_offers_url, params: { flight_offer: valid_attributes }
        end.to change(FlightOffer, :count).by(1)
      end

      it 'redirects to the created flight_offer' do
        post flight_offers_url, params: { flight_offer: valid_attributes }
        expect(response).to redirect_to(flight_offer_url(FlightOffer.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new FlightOffer' do
        expect do
          post flight_offers_url, params: { flight_offer: invalid_attributes }
        end.to change(FlightOffer, :count).by(0)
      end

      it 'renders an error message' do
        post flight_offers_url, params: { flight_offer: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          internal_id: 'Test1',
          source: 'Test1',
          instant_ticketing_required: true,
          non_homogeneous: true,
          one_way: true,
          last_ticketing_date: '2025-03-01',
          last_ticketing_datetime: '2025-03-01T00:00:00',
          number_of_bookable_seats: 2,
          price_total: '12.3',
          currency_id: create(:currency).id,
          flight_search_id: create(:flight_search).id
        }
      end

      it 'updates the requested flight_offer' do
        flight_offer = FlightOffer.create! valid_attributes
        patch flight_offer_url(flight_offer), params: { flight_offer: new_attributes }
        flight_offer.reload
        expect(flight_offer.internal_id).to eq('Test1')
        expect(flight_offer.source).to eq('Test1')
        expect(flight_offer.instant_ticketing_required).to eq(true)
        expect(flight_offer.non_homogeneous).to eq(true)
        expect(flight_offer.one_way).to eq(true)
        expect(flight_offer.last_ticketing_date.to_s).to eq('2025-03-01')
        expect(flight_offer.last_ticketing_datetime.to_s).to eq('2025-03-01 00:00:00 UTC')
        expect(flight_offer.number_of_bookable_seats).to eq(2)
        expect(flight_offer.price_total.to_s).to eq('12.3')
        expect(flight_offer.currency_id).to eq(new_attributes[:currency_id])
        expect(flight_offer.flight_search_id).to eq(new_attributes[:flight_search_id])
      end

      it 'redirects to the flight_offer' do
        flight_offer = FlightOffer.create! valid_attributes
        patch flight_offer_url(flight_offer), params: { flight_offer: new_attributes }
        flight_offer.reload
        expect(response).to redirect_to(flight_offer_url(flight_offer))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        flight_offer = FlightOffer.create! valid_attributes
        patch flight_offer_url(flight_offer), params: { flight_offer: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested flight_offer' do
      flight_offer = FlightOffer.create! valid_attributes
      expect do
        delete flight_offer_url(flight_offer)
      end.to change(FlightOffer, :count).by(-1)
    end

    it 'redirects to the flight_offers list' do
      flight_offer = FlightOffer.create! valid_attributes
      delete flight_offer_url(flight_offer)
      expect(response).to redirect_to(flight_offers_url)
    end
  end
end
