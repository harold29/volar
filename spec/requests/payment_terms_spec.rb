require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/payment_terms', type: :request do
  # PaymentTerm. As you add validations to PaymentTerm, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: FFaker::Lorem.word,
      description: FFaker::Lorem.sentence,
      payment_type: 1,
      payment_terms: FFaker::Lorem.word,
      payment_terms_description: FFaker::Lorem.sentence,
      payment_terms_conditions: FFaker::Lorem.word,
      payment_terms_conditions_url: FFaker::Internet.http_url,
      payment_terms_file: FFaker::Filesystem.file_name,
      payment_terms_file_url: FFaker::Internet.http_url,
      days_max_number: 30,
      days_min_number: 15,
      payment_period_in_days: 1,
      interest_rate: FFaker::Number.decimal,
      penalty_rate: FFaker::Number.decimal,
      installments_max_number: 12,
      installments_min_number: 1,
      installments: false,
      active: false,
      deleted: false
    }
  end

  let(:invalid_attributes) do
    {
      name: nil,
      description: nil,
      payment_type: nil,
      payment_terms: nil,
      payment_terms_description: nil,
      payment_terms_conditions: nil,
      payment_terms_conditions_url: nil,
      payment_terms_file: nil,
      payment_terms_file_url: nil,
      days_max_number: nil,
      days_min_number: nil,
      payment_period_in_days: nil,
      interest_rate: nil,
      penalty_rate: nil,
      installments_max_number: nil,
      installments_min_number: nil,
      installments: nil,
      active: nil,
      deleted: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      PaymentTerm.create! valid_attributes
      get payment_terms_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      payment_term = PaymentTerm.create! valid_attributes
      get payment_term_url(payment_term)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_payment_term_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      payment_term = PaymentTerm.create! valid_attributes
      get edit_payment_term_url(payment_term)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new PaymentTerm' do
        expect do
          post payment_terms_url, params: { payment_term: valid_attributes }
        end.to change(PaymentTerm, :count).by(1)
      end

      it 'redirects to the created payment_term' do
        post payment_terms_url, params: { payment_term: valid_attributes }
        expect(response).to redirect_to(payment_term_url(PaymentTerm.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new PaymentTerm' do
        expect do
          post payment_terms_url, params: { payment_term: invalid_attributes }
        end.to change(PaymentTerm, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post payment_terms_url, params: { payment_term: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: 'new term'
        }
      end

      it 'updates the requested payment_term' do
        payment_term = PaymentTerm.create! valid_attributes
        patch payment_term_url(payment_term), params: { payment_term: new_attributes }
        payment_term.reload
        expect(payment_term.name).to eq('new term')
      end

      it 'redirects to the payment_term' do
        payment_term = PaymentTerm.create! valid_attributes
        patch payment_term_url(payment_term), params: { payment_term: new_attributes }
        payment_term.reload
        expect(response).to redirect_to(payment_term_url(payment_term))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        payment_term = PaymentTerm.create! valid_attributes
        patch payment_term_url(payment_term), params: { payment_term: invalid_attributes }
        expect(response).to be_unprocessable
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested payment_term' do
      payment_term = PaymentTerm.create! valid_attributes
      expect do
        delete payment_term_url(payment_term)
      end.to change(PaymentTerm, :count).by(-1)
    end

    it 'redirects to the payment_terms list' do
      payment_term = PaymentTerm.create! valid_attributes
      delete payment_term_url(payment_term)
      expect(response).to redirect_to(payment_terms_url)
    end
  end
end
