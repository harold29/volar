require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/airlines", type: :request do

  # Airline. As you add validations to Airline, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Name",
      logo: "Logo"
    }
  }

  let(:invalid_attributes) {
    {
      name: nil,
      logo: nil
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Airline.create! valid_attributes
      get airlines_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      airline = Airline.create! valid_attributes
      get airline_url(airline)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_airline_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      airline = Airline.create! valid_attributes
      get edit_airline_url(airline)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Airline" do
        expect {
          post airlines_url, params: { airline: valid_attributes }
        }.to change(Airline, :count).by(1)
      end

      it "redirects to the created airline" do
        post airlines_url, params: { airline: valid_attributes }
        expect(response).to redirect_to(airline_url(Airline.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Airline" do
        expect {
          post airlines_url, params: { airline: invalid_attributes }
        }.to change(Airline, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post airlines_url, params: { airline: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "Name2",
          logo: "Logo2"
        }
      }

      it "updates the requested airline" do
        airline = Airline.create! valid_attributes
        patch airline_url(airline), params: { airline: new_attributes }
        airline.reload

        expect(airline.name).to eq("Name2")
        expect(airline.logo).to eq("Logo2")
      end

      it "redirects to the airline" do
        airline = Airline.create! valid_attributes
        patch airline_url(airline), params: { airline: new_attributes }
        airline.reload
        expect(response).to redirect_to(airline_url(airline))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        airline = Airline.create! valid_attributes
        patch airline_url(airline), params: { airline: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested airline" do
      airline = Airline.create! valid_attributes
      expect {
        delete airline_url(airline)
      }.to change(Airline, :count).by(-1)
    end

    it "redirects to the airlines list" do
      airline = Airline.create! valid_attributes
      delete airline_url(airline)
      expect(response).to redirect_to(airlines_url)
    end
  end
end
