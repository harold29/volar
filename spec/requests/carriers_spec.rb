require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/carriers', type: :request do
  # Carrier. As you add validations to Carrier, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: 'Name',
      logo: 'Logo',
      code: 'Code'
    }
  end

  let(:invalid_attributes) do
    {
      name: nil,
      logo: nil,
      code: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Carrier.create! valid_attributes
      get carriers_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      carrier = Carrier.create! valid_attributes
      get carrier_url(carrier)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_carrier_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      carrier = Carrier.create! valid_attributes
      get edit_carrier_url(carrier)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Carrier' do
        expect do
          post carriers_url, params: { carrier: valid_attributes }
        end.to change(Carrier, :count).by(1)
      end

      it 'redirects to the created carrier' do
        post carriers_url, params: { carrier: valid_attributes }
        expect(response).to redirect_to(carrier_url(Carrier.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Carrier' do
        expect do
          post carriers_url, params: { carrier: invalid_attributes }
        end.to change(Carrier, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post carriers_url, params: { carrier: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: 'Name2',
          logo: 'Logo2',
          code: 'Code2'
        }
      end

      it 'updates the requested carrier' do
        carrier = Carrier.create! valid_attributes
        patch carrier_url(carrier), params: { carrier: new_attributes }
        carrier.reload

        expect(carrier.name).to eq('Name2')
        expect(carrier.logo).to eq('Logo2')
      end

      it 'redirects to the carrier' do
        carrier = Carrier.create! valid_attributes
        patch carrier_url(carrier), params: { carrier: new_attributes }
        carrier.reload
        expect(response).to redirect_to(carrier_url(carrier))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        carrier = Carrier.create! valid_attributes
        patch carrier_url(carrier), params: { carrier: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested carrier' do
      carrier = Carrier.create! valid_attributes
      expect do
        delete carrier_url(carrier)
      end.to change(Carrier, :count).by(-1)
    end

    it 'redirects to the carriers list' do
      carrier = Carrier.create! valid_attributes
      delete carrier_url(carrier)
      expect(response).to redirect_to(carriers_url)
    end
  end
end
